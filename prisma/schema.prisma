generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  auth_id    String   @unique
  email      String   @unique
  name       String?
  currency   String   @default("USD")
  created_at DateTime @default(now())

  banks        Bank[]
  credit_cards CreditCard[]
  categories   Category[]
  transactions Transaction[]
  debts        Debt[]
}

model Bank {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String
  type       String // 'bank', 'ewallet', 'cash'
  balance    Decimal  @db.Decimal(12, 2)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  user         User          @relation(fields: [user_id], references: [id])
  credit_cards CreditCard[]
  transactions Transaction[]
}

model CreditCard {
  id              Int      @id @default(autoincrement())
  user_id         Int
  bank_id         Int
  name            String
  last_four       String
  due_day         Int
  closing_day     Int
  credit_limit    Decimal  @db.Decimal(12, 2)
  current_balance Decimal  @db.Decimal(12, 2)
  interest_rate   Decimal  @db.Decimal(5, 2)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())

  user                     User                    @relation(fields: [user_id], references: [id])
  bank                     Bank                    @relation(fields: [bank_id], references: [id])
  transactions             Transaction[]
  billing_cycles           BillingCycle[]
  credit_card_transactions CreditCardTransaction[]
}

model Category {
  id      Int    @id @default(autoincrement())
  user_id Int? // NULL para categor√≠as del sistema
  name    String
  icon    String @default("receipt")
  color   String @default("#6c757d")

  user                     User?                   @relation(fields: [user_id], references: [id])
  transactions             Transaction[]
  credit_card_transactions CreditCardTransaction[]
}

model Transaction {
  id             Int      @id @default(autoincrement())
  user_id        Int
  bank_id        Int?
  credit_card_id Int?
  category_id    Int?
  amount         Decimal  @db.Decimal(12, 2)
  description    String?
  type           String // 'income' | 'expense'
  payment_method String // 'cash' | 'debit' | 'credit' | 'transfer'
  date           DateTime
  is_recurring   Boolean  @default(false)
  created_at     DateTime @default(now())

  user        User        @relation(fields: [user_id], references: [id])
  bank        Bank?       @relation(fields: [bank_id], references: [id])
  credit_card CreditCard? @relation(fields: [credit_card_id], references: [id])
  category    Category?   @relation(fields: [category_id], references: [id])
}

model BillingCycle {
  id             Int      @id @default(autoincrement())
  credit_card_id Int
  start_date     DateTime
  end_date       DateTime
  due_date       DateTime
  total_spent    Decimal  @db.Decimal(12, 2)
  paid_amount    Decimal  @db.Decimal(12, 2)
  status         String   @default("open") // 'open', 'closed', 'paid', 'overdue'

  credit_card              CreditCard              @relation(fields: [credit_card_id], references: [id])
  credit_card_transactions CreditCardTransaction[]
}

model CreditCardTransaction {
  id                    Int      @id @default(autoincrement())
  credit_card_id        Int
  billing_cycle_id      Int
  amount                Decimal  @db.Decimal(12, 2)
  description           String
  date                  DateTime
  category_id           Int?
  installments          Int      @default(1)
  is_installment        Boolean  @default(false)
  parent_transaction_id Int?

  credit_card        CreditCard              @relation(fields: [credit_card_id], references: [id])
  billing_cycle      BillingCycle            @relation(fields: [billing_cycle_id], references: [id])
  category           Category?               @relation(fields: [category_id], references: [id])
  parent_transaction CreditCardTransaction?  @relation("InstallmentParent", fields: [parent_transaction_id], references: [id])
  child_installments CreditCardTransaction[] @relation("InstallmentParent")
}

model Debt {
  id             Int       @id @default(autoincrement())
  user_id        Int
  creditor_name  String
  initial_amount Decimal   @db.Decimal(12, 2)
  pending_amount Decimal   @db.Decimal(12, 2)
  interest_rate  Decimal   @db.Decimal(5, 2)
  due_date       DateTime?
  status         String    @default("active") // 'active', 'paid', 'overdue'
  created_at     DateTime  @default(now())

  user User @relation(fields: [user_id], references: [id])
}
